{
  "name": "json-refs",
  "version": "0.2.0",
  "description": "Various utilities for JSON References (http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03).",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/gulp/bin/gulp.js"
  },
  "author": {
    "name": "Jeremy Whitlock",
    "email": "jwhitlock@apache.org",
    "url": "https://github.com/whitlockjc"
  },
  "bugs": {
    "url": "https://github.com/whitlockjc/json-refs/issues"
  },
  "files": [
    "index.js",
    "LICENSE"
  ],
  "homepage": "https://github.com/whitlockjc/json-refs",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/whitlockjc/json-refs.git"
  },
  "keywords": [
    "json"
  ],
  "devDependencies": {
    "basic-auth": "^1.0.1",
    "brfs": "~1.4.0",
    "browserify": "~10.1.3",
    "connect": "^3.3.5",
    "del": "^1.1.1",
    "exposify": "~0.4.0",
    "gulp": "~3.8.11",
    "gulp-eslint": "^0.12.0",
    "gulp-istanbul": "~0.9.0",
    "gulp-mocha": "~2.0.1",
    "gulp-mocha-phantomjs": "^0.6.1",
    "js-yaml": "^3.3.0",
    "run-sequence": "^1.1.0",
    "uglifyify": "~3.0.1",
    "vinyl-source-stream": "~1.1.0"
  },
  "dependencies": {
    "lodash-compat": "^3.8.0",
    "native-promise-only": "^0.7.8-a",
    "path-loader": "0.0.2",
    "traverse": "~0.6.6"
  },
  "readme": "# json-refs\n\nVarious utilities for [JSON References][json-reference-draft-spec], and [JSON Pointers][json-pointer-spec] since JSON\nReferences are part JSON Pointer.\n\n## Project Badges\n\n* Build status: [![Build Status](https://travis-ci.org/whitlockjc/json-refs.svg)](https://travis-ci.org/whitlockjc/json-refs)\n* Dependencies: [![Dependencies](https://david-dm.org/whitlockjc/json-refs.svg)](https://david-dm.org/whitlockjc/json-refs)\n* Developer dependencies: [![Dev Dependencies](https://david-dm.org/whitlockjc/json-refs/dev-status.svg)](https://david-dm.org/whitlockjc/json-refs#info=devDependencies&view=table)\n* Downloads: [![NPM Downloads Per Month](http://img.shields.io/npm/dm/json-refs.svg)](https://www.npmjs.org/package/json-refs)\n* License: [![License](http://img.shields.io/npm/l/json-refs.svg)](https://github.com/whitlockjc/json-refs/blob/master/LICENSE)\n* Version: [![NPM Version](http://img.shields.io/npm/v/json-refs.svg)](https://www.npmjs.org/package/json-refs)\n\n## Installation\n\njson-refs is available for both Node.js and the browser.  Installation instructions for each environment are below.\n\n### Browser\n\nInstallation for browser applications can be done via [Bower][bower] or by downloading a standalone binary.\n\n#### Using Bower\n\n```\nbower install json-refs --save\n```\n\n#### Standalone Binaries\n\nThe standalone binaries come in two flavors:\n\n* [json-refs-standalone.js](https://raw.github.com/whitlockjc/json-refs/master/browser/json-refs-standalone.js): _396kb_, full source and source maps\n* [json-refs-standalone-min.js](https://raw.github.com/whitlockjc/json-refs/master/browser/json-refs-standalone-min.js): _64kb_, minified, compressed\nand no sourcemap\n\n### Node.js\n\nInstallation for Node.js applications can be done via [NPM][npm].\n\n```\nnpm install json-refs --save\n```\n\n## APIs\n\nAll examples below use a variable called `jsonRefs`.  Here is how to create it in Node.js:\n\n```js\nvar jsonRefs = require('json-refs');\n```\n\nFor the browser, `JsonRefs` is exported.\n\n## `findRefs (json)`\n\n**Arguments**\n\n* `json {object}` - The JavaScript object to search for references\n\n**Response**\n\nAn `object` whose keys are JSON Pointers to where the JSON Reference's `$ref` node is and the JSON Reference `string`.\n\n## `isJsonReference (obj)`\n\n**Arguments**\n\n* `[obj] {*}` - The object to check\n\n**Response**\n\n`true` if the argument is an `object` and its `$ref` property is a JSON Pointer and `false` otherwise.\n\n## `isRemotePointer (ptr)`\n\n**Arguments**\n\n* `ptr {*}` - The JSON Pointer to check\n\n**Response**\n\n`true` if the argument is an is a JSON Pointer to a remote document and `false` otherwise.\n\n## `pathFromPointer (ptr)`\n\n**Arguments**\n\n* `ptr {string}` - A JSON Pointer string\n\n**Response**\n\nA `string[]` of path segments for the JSON Pointer unless its a remote reference in which case `ptr` is returned as-is.\n\n**Example**\n\n```js\nconsole.log(jsonRefs.pathFromPointer('#/owner/login')); // ['owner', 'login']\n```\n\n## `pathToPointer (path)`\n\n**Arguments**\n\n* `path {string[]}` - An array of path segments.\n\n**Response**\n\nA `string` representing a JSON Pointer.\n\n**Example**\n\n```js\nconsole.log(jsonRefs.pathToPointer(['owner', 'login'])); // #/owner/login\n```\n\n## `resolveRefs (json, options, done)`\n\n**Arguments**\n\n* `json {object}`: The JavaScript object containing zero or more JSON References\n* `[options] {object}`: The options\n* `[options.prepareRequest] {function}`: The callback used to prepare a request\n* `[options.processContent] {function}`: The callback used to process the remote request content\n* `done {function}`: An error-first callback to be called with the fully-resolved object and metadata for the reference\nresolution\n\n**Response**\n\nIf there is an `Error`, the callback is called with the `Error` in the first argument and `undefined` in the second\nargument.  If there is no `Error`, the first argument is `undefined` and the second argument is an `object` whose value\nis the fully resolved document.  The third argument is an `object` whose value is the reference resolution metadata.\nIts keys are the location of the reference and it's values are as follows:\n\n* `ref {string}`: The reference value as it existed in the original document\n* `[value] {*}`: The resolved value of the reference, if there is one.  If this property was set, this means that the\nreference was resolvable and it resolved to an explicit value.  If this property is not set, that means the reference\nwas unresolvable.  A value of `undefined` means that the reference was resolvable to an actual value of `undefined` and\nis not indicative of an unresolvable reference.\n* `\n\n##Usage\n\n**Note:** If you need to alter your request in any way, for example to add specific headers to the request or to add\nauthentication to the request or any other situation in which the request might need to be altered, you will need to use\nthe `options.prepareRequest` callback.  Here is a simple example that uses `options.prepareRequest` to make a secure\nrequest using an Basic Authentication _(The example is written for Node.js but the actual business logic in how\n`resolveRefs` is called sould be the same in the browser)_:\n\n```js\nvar jsonRefs = require('json-refs');\nvar json = {\n  name: 'json-refs',\n  owner: {\n    $ref: 'https://api.github.com/repos/whitlockjc/json-refs#/owner'\n  }\n};\njsonRefs.resolveRefs(json, {\n  prepareRequest: function (req) {\n    // Add the 'Basic Authentication' credentials\n    req.auth('whitlockjc', 'MY_GITHUB_PASSWORD');\n\n    // Add the 'X-API-Key' header for an API Key based authentication\n    // req.set('X-API-Key', 'MY_API_KEY');\n  }\n}, function (err, rJson, metadata) {\n  if (err) throw err;\n\n  console.log(JSON.stringify(rJson)); // {name: 'json-refs', owner: {/* GitHub Repository Owner Information */}}\n  console.log(JSON.stringify(metadata)); // {'#/owner/$ref': {ref: 'https://api.github.com/repos/whitlockjc/json-refs#/owner', value: {/*GitHub Repository Onwer Information */}}}\n});\n```\n\n**Note:** If you need to pre-process the content of your remote requets, like to support data not explicitly supported\nby Superagent, you can use the `options.processContent` callback.  Here is a simple example that uses\n`options.processContent` to retrieve a YAML resource:\n\n```js\nvar jsonRefs = require('json-resf');\nvar YAML = require('yamljs');\n\njsonRefs.resolveRefs({\n  $ref: 'http://somehost/somefile.yaml'\n}, {\n  processContent: function (content) {\n    return YAML.parse(content);\n  }\n}, function (err, rJson, metadata) {\n  if (err) throw err;\n\n  console.log(JSON.stringify(rJson)); // Document should be JSON equivalent of your YAML document\n});\n```\n\n###Node.js\n```js\nvar jsonRefs = require('json-refs');\nvar json = {\n  name: 'json-refs',\n  owner: {\n    $ref: 'https://api.github.com/repos/whitlockjc/json-refs#/owner'\n  }\n};\njsonRefs.resolveRefs(json, function (err, rJson, metadata) {\n  if (err) throw err;\n\n  console.log(JSON.stringify(rJson)); // {name: 'json-refs', owner: {/* GitHub Repository Owner Information */}}\n  console.log(JSON.stringify(metadata)); // {'#/owner/$ref': {ref: 'https://api.github.com/repos/whitlockjc/json-refs#/owner', value: {/*GitHub Repository Onwer Information */}}}\n});\n```\n\n###Browser\n\n**Bower**\n\n```html\n<html>\n  <head>\n    <title>Bower Example</title>\n    <script src=\"bower_components/lodash/lodash.js\"></script>\n    <script src=\"bower_components/superagent/superagent.js\"></script>\n    <script src=\"bower_components/traverse/traverse.js\"></script>\n    <script src=\"bower_components/json-refs/browser/json-refs.js\"></script>\n  </head>\n  <body>\n  </body>\n  <script>\n    var json = {\n      name: 'json-refs',\n      owner: {\n        $ref: 'https://api.github.com/repos/whitlockjc/json-refs#/owner'\n      }\n    };\n\n    JsonRefs.resolveRefs(json, function (err, rJson) {\n      if (err) throw err;\n\n      console.log(rJson);\n    });\n  </script>\n</html>\n```\n\n**Standalone**\n\n```html\n<html>\n  <head>\n    <title>Standalone Example</title>\n    <script src=\"json-refs-standalone.js\"></script>\n  </head>\n  <body>\n\n  </body>\n  <script>\n    var json = {\n      name: 'json-refs',\n      owner: {\n        $ref: 'https://api.github.com/repos/whitlockjc/json-refs#/owner'\n      }\n    };\n\n    JsonRefs.resolveRefs(json, function (err, rJson) {\n      if (err) throw err;\n\n      console.log(rJson);\n    });\n  </script>\n</html>\n```\n[bower]: http://bower.io/\n[npm]: https://www.npmjs.com/\n[json-reference-draft-spec]: http://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03\n[json-pointer-spec]: http://tools.ietf.org/html/rfc6901\n",
  "readmeFilename": "README.md",
  "_id": "json-refs@0.2.0",
  "_from": "json-refs@^0.2.0"
}
