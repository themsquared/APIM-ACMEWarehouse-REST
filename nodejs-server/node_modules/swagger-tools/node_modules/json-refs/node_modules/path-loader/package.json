{
  "name": "path-loader",
  "version": "0.0.2",
  "description": "Utility that provides a single API for loading the content of a path/URL.",
  "main": "index.js",
  "scripts": {
    "test": "./node_modules/gulp/bin/gulp.js"
  },
  "author": {
    "name": "Jeremy Whitlock",
    "email": "jwhitlock@apache.org",
    "url": "https://github.com/whitlockjc"
  },
  "bugs": {
    "url": "https://github.com/whitlockjc/path-loader/issues"
  },
  "files": [
    "index.js",
    "lib/**/*.js",
    "LICENSE"
  ],
  "homepage": "https://github.com/whitlockjc/path-loader",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/whitlockjc/path-loader.git"
  },
  "keywords": [
    "json"
  ],
  "browser": {
    "./lib/loaders/file.js": "./lib/loaders/file-browser.js"
  },
  "devDependencies": {
    "basic-auth": "^1.0.1",
    "brfs": "~1.4.0",
    "browserify": "~10.1.3",
    "connect": "^3.3.5",
    "del": "^1.1.1",
    "gulp": "~3.8.11",
    "gulp-eslint": "^0.12.0",
    "gulp-istanbul": "~0.9.0",
    "gulp-mocha": "~2.0.1",
    "gulp-mocha-phantomjs": "^0.6.1",
    "js-yaml": "^3.3.0",
    "run-sequence": "^1.1.0",
    "uglifyify": "~3.0.1",
    "vinyl-source-stream": "~1.1.0"
  },
  "dependencies": {
    "native-promise-only": "^0.7.8-a",
    "superagent": "~1.2.0"
  },
  "readme": "# path-loader\n\nUtility that provides a single API for loading the content of a path/URL.  This module works in the browser and in\nio.js/Node.js.  Right now this module supports the following loaders:\n\n* http/https: This loader is used by default in the browser and will also be used in io.js/Node.js if the location being\nloaded starts with `http:` or `https:`\n* file: This loader is the used by default in io.js/Node.js and will throw an error in the browser _(Due to how\nlocations are mapped to loaders, the only way to use the `file` loader in the browser is to attempt to load a file using\nthe URL-version of its location.  (Example: `file:///Users/not-you/projects/path-loader/package.json`))_\n\nIn the future, there will likely be a pluggable infrastructure for altering this list or overriding the loaders provided\nby the project but for now that is not an option.\n\n## Project Badges\n\n* Build status: [![Build Status](https://travis-ci.org/whitlockjc/path-loader.svg)](https://travis-ci.org/whitlockjc/path-loader)\n* Dependencies: [![Dependencies](https://david-dm.org/whitlockjc/path-loader.svg)](https://david-dm.org/whitlockjc/path-loader)\n* Developer dependencies: [![Dev Dependencies](https://david-dm.org/whitlockjc/path-loader/dev-status.svg)](https://david-dm.org/whitlockjc/path-loader#info=devDependencies&view=table)\n* Downloads: [![NPM Downloads Per Month](http://img.shields.io/npm/dm/path-loader.svg)](https://www.npmjs.org/package/path-loader)\n* License: [![License](http://img.shields.io/npm/l/path-loader.svg)](https://github.com/whitlockjc/path-loader/blob/master/LICENSE)\n* Version: [![NPM Version](http://img.shields.io/npm/v/path-loader.svg)](https://www.npmjs.org/package/path-loader)\n\n## Installation\n\npath-loader is available for both Node.js and the browser.  Installation instructions for each environment are below.\n\n### Browser\n\nInstallation for browser applications can be done via [Bower][bower] or by downloading a standalone binary.\n\n#### Using Bower\n\n```\nbower install path-loader --save\n```\n\n#### Standalone Binaries\n\nThe standalone binaries come in two flavors:\n\n* [path-loader.js](https://raw.github.com/whitlockjc/path-loader/master/browser/path-loader.js): _108kb_, full source  and source maps\n* [path-loader-min.js](https://raw.github.com/whitlockjc/path-loader/master/browser/path-loader-min.js): _20kb_, minified, compressed and no sourcemap\n\n### Node.js\n\nInstallation for Node.js applications can be done via [NPM][npm].\n\n```\nnpm install path-loader --save\n```\n\n## APIs\n\nAll examples below use a variable called `PathLoader`.  Here is how to create it in Node.js:\n\n```js\nvar PathLoader = require('path-loader');\n```\n\nFor the browser, `PathLoader` is exported.\n\n## `load (location, [options], [callback])`\n\n**Arguments**\n\n* `location {string}` - The location of the document _(Can be an absolute or relative path/url.  If relative, the base\nis dependent upon the environment: Node.js will default to `process.cwd()` and browser will default to\n`window.location`)_\n* `[options] {object}` - The options used for the loader\n* `[options.method] {string}` - The HTTP method to use _(Only used in the browser or whenever you attempt to load\nabsolute URLs within Node.js)_\n* `[options.prepareRequest] {function}` - The callback used to further alter the [Superagent request][superagent] prior\nto making the request _(Like `options.method` when it comes to applicability.  Useful for when you need to load a\ndocument that requires authentication/authorization to access.)_\n* `[callback] {function}` - Typical error-first callback\n\n**Response**\n\nThe response is always a `Promsie` even if you pass in a callback.  _(This does not mean you cannot use callbacks\nwithout promises, it just means we use promises internally to drive things...even your callback.)_\n\n**Examples**\n\nThe examples below are written for Node.js.  The only difference between the browser and Node.js is in the browser, you\nwould use `PathLoader` to call the APIs below instead of first doing a `require` and then using the variable name of\nyour choice.  So for example, you would use `PathLoader.load` instead of what you see below.  Everything else is\nidentical.\n\n```js\nvar pathLoader = require('path-loader');\nvar YAML = require('js-yaml');\n\n// Load a local file relatively (Promise)\npathLoader\n  .load('./package.json')\n  .then(JSON.parse)\n  .then(function (document) {\n    console.log(document.name + ' (' + document.version + '): ' + document.description);\n  }, function (err) {\n    console.error(err.stack);\n  });\n\n// Load a local file relatively (Callbacks)\npathLoader\n  .load('./package.json', function (err, document) {\n    if (err) {\n      console.error(err.stack);\n    } else {\n      try {\n        document = JSON.parse(document)\n        console.log(document.name + ' (' + document.version + '): ' + document.description);\n      } catch (err2) {\n        callback(err2);\n      }\n    });\n\n// Load a file from a url\npathLoader\n  .load('https://api.github.com/repos/whitlockjc/path-loader')\n  .then(JSON.parse)\n  .then(function (document) {\n    console.log(document.full_name + ': ' + document.description);\n  }, function (err) {\n    console.error(err.stack);\n  });\n\n// Load a file from a url (with auth)\npathLoader\n  .load('https://api.github.com/repos/whitlockjc/path-loader', {\n    prepareRequest: function (req) {\n      req.auth('my-username', 'my-password')\n    }\n  })\n  .then(JSON.parse)\n  .then(function (document) {\n    console.log(document.full_name + ': ' + document.description);\n  }, function (err) {\n    console.error(err.stack);\n  });\n\n// Loading a file that is YAML\npathLoader\n  .load('/Users/not-you/projects/path-loader/.travis.yml')\n  .then(YAML.safeLoad)\n  .then(function (document) {\n    console.log('path-loader uses the', document.language, 'language.');\n  }, function (err) {\n    console.error(err.stack);\n  });\n\n```\n\n[bower]: http://bower.io/\n[npm]: https://www.npmjs.com/\n[superagent]: http://visionmedia.github.io/superagent/\n",
  "readmeFilename": "README.md",
  "_id": "path-loader@0.0.2",
  "_from": "path-loader@0.0.2"
}
